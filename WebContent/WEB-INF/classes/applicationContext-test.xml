<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd"
		default-lazy-init="false">

	<description>Spring公共配置 </description>
	<bean class="com.its.frd.util.SpringBeanUtils"/>
	
	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- <value>classpath:redis/redisConfig.properties</value> -->
				<value>classpath:/jdbc.properties</value>
				<value>classpath:/casUrl.properties</value>
				<value>classpath:/config.properties</value>
				<value>classpath:/redis/redisConfig.properties</value>
				<value>classpath:/msa.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.its.common,com.its.frd,com.its.monitor,com.its.statistics">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
		<context:exclude-filter type="annotation" expression="org.springframework.context.annotation.Configuration"/>
	</context:component-scan>
	<bean id="messageChannel" class="org.springframework.messaging.support.ExecutorSubscribableChannel"></bean>
	<bean id="template" class="org.springframework.messaging.simp.SimpMessagingTemplate">
		<constructor-arg name="messageChannel" ref="messageChannel"></constructor-arg>
	</bean>
		<!-- freemarker 配置 -->
	<bean id="freemarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/views/monitor/ftl/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">10</prop>
				<prop key="defaultEncoding">UTF-8</prop>
			</props>
		</property>
	</bean>
	<!-- Spring Data Jpa配置 , 扫描base-package下所有继承于Repository<T,ID>的接口-->
 	<jpa:repositories base-package="com.its"  
 		transaction-manager-ref="transactionManager" 
 		entity-manager-factory-ref="entityManagerFactory"/>

	<!-- Jpa Entity Manager 配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean" depends-on="dynamicDataSource"> 
		<property name="dataSource" ref="dataSourceProxy"/>
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
		<property name="packagesToScan" value="com.its"/>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.current_session_context_class">thread</prop>
				
				<!-- 抓取策略 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<prop key="hibernate.default_batch_fetch_size">4</prop>
				<prop key="hibernate.jdbc.fetch_size">30</prop>
				<prop key="hibernate.jdbc.batch_size">50</prop>
				
				<!-- 缓存 -->
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
				
				<!-- 建表的命名规则 -->
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				
				<!-- 用于调试的属性 -->
				
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop> 
				<!-- <prop key="hibernate.generate_statistics">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop> -->
				
				<!-- end 用于调试的属性 -->			
			</props>
		</property>
	</bean>

	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<!-- <property name="databasePlatform" value="${hibernate.dialect}"/> -->
	</bean>
	<!-- 事务管理器配置, Jpa单数据源事务 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"/>
	</bean>
    <bean id="dataSourceExchange" class="com.its.common.util.persistence.DataSourceExchange"/>
	<!-- 使用annotation定义事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
	
	<!-- 邮件服务 --> 
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="${mail.host}" />
        <property name="port" value="${mail.port}" />
        <property name="username" value="${mail.username}" />
        <property name="password" value="${mail.password}" />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
            </props>
        </property>
    </bean>
    <!-- 动态数据源配置 -->
	<bean id="dynamicDataSource" class="com.its.common.util.persistence.DynamicDataSource" >
        <property name="targetDataSources">
            <map key-type="java.lang.String">
            <!-- mysql数据源 -->
                <entry key="dataSource" value-ref="dataSource"></entry>
               <!-- postgre 数据源 -->
                <entry key="dataSource_postgre" value-ref="dataSource_postgre"></entry>
            </map>
        </property>
        <!-- 默认数据源 postgre -->
        <property name="defaultTargetDataSource" ref="dataSource" >
        </property>
    </bean>
	
	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <property name="targetDataSource" ref="dynamicDataSource"/>
    </bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" read-only="true" />
        </tx:attributes>
    </tx:advice>
	<aop:config>
     	<aop:pointcut id="allServiceMethod" expression="execution(* com.its.*.service.*.*(..)) " />
        <aop:advisor pointcut-ref="allServiceMethod" advice-ref="txAdvice" order="2" />
        <aop:advisor advice-ref="dataSourceExchange" pointcut-ref="allServiceMethod" order="1"/>
    </aop:config>
	
	
	<!-- production环境 -->
 		<!-- <context:property-placeholder ignore-unresolvable="true"
			location="classpath:/jdbc.properties" />	 -->
		
		<!-- 数据源配置, 使用DBCP数据库连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver.mysql}" />
			<property name="url" value="${jdbc.url.mysql}" />
			<property name="username" value="${jdbc.username.mysql}" />
			<property name="password" value="${jdbc.password.mysql}" />
		
			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${dbcp.maxActive}" />
			<property name="maxIdle" value="${dbcp.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<!-- 连接Idle一个小时后超时 -->
			<property name="timeBetweenEvictionRunsMillis" value="3600000" />
			<property name="minEvictableIdleTimeMillis" value="3600000" />
		</bean>
		<!-- 这是第二个数据源配置,可按需求更改为需要的数据源,目前是测试配置 -->
		<bean id="dataSource_postgre" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" >
			<!-- Connection Info -->
			<property name="driverClassName" value="${jdbc.driver.postgre}" />
			<property name="url" value="${jdbc.url.postgre}" />
			<property name="username" value="${jdbc.username.postgre}" />
			<property name="password" value="${jdbc.password.postgre}" />
		
			<!-- Connection Pooling Info -->
			<property name="maxActive" value="${dbcp.maxActive}" />
			<property name="maxIdle" value="${dbcp.maxIdle}" />
			<property name="defaultAutoCommit" value="false" />
			<!-- 连接Idle一个小时后超时 -->
			<property name="timeBetweenEvictionRunsMillis" value="3600000" />
			<property name="minEvictableIdleTimeMillis" value="3600000" />
		</bean>
	
</beans>